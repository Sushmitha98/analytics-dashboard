* Documentation for installing elastic search and nginx 

** Initially install the following Pre-requisites for elastic search
#+BEGIN_EXAMPLE
  sudo apt-get update
  sudo apt-get -y install build-essential
  sudo apt-get -y install binutils
  sudo apt-get -y install binutils-doc
  sudo apt-get -y install python-dev python3-dev
  sudo apt-get -y install python-pip
  sudo apt-get -y install git
  sudo apt-get install -y software-properties-common
  sudo apt-get install -y python-software-properties

#+END_EXAMPLE


** Setting up JVM
#+BEGIN_EXAMPLE
   To install Oracle Java, run:
   sudo add-apt-repository ppa:webupd8team/java
   sudo apt-get update
   sudo apt-get install oracle-java7-installer
#+END_EXAMPLE



** Installing Elastic search
   First we add the public key.
   #+BEGIN_EXAMPLE
   wget -O - http://packages.elasticsearch.org/GPG-KEY-elasticsearch | sudo apt-key add -
   #+END_EXAMPLE
   Add the following line to the file
#+BEGIN_EXAMPLE
/etc/apt/sources.list.d/elasticsearch.list

   deb http://packages.elasticsearch.org/elasticsearch/1.1/debian stable main
#+END_EXAMPLE

   
   Now let us install ElasticSearch by running the following commands.
#+BEGIN_EXAMPLE
   sudo apt-get update
   sudo apt-get install elasticsearch
#+END_EXAMPLE

   
   Start Elasticsearch with the command
#+BEGIN_EXAMPLE
   sudo service elasticsearch start

#+END_EXAMPLE
   

** Testing Elastic Search
  Open the browser and type http://localhost:9200
#+BEGIN_EXAMPLE
 You should get an output similar to the one below
  {
   "name" : "Mister Fear",
   "cluster_name" : "elasticsearch",
   "cluster_uuid" : "xrgRgsPFSkeqx266XlQuyQ",
   "version" : {
   "number" : "2.4.4",
   "build_hash" : "fcbb46dfd45562a9cf00c604b30849a6dec6b017",
   "build_timestamp" : "2017-01-03T11:33:16Z",
   "build_snapshot" : false,
   "lucene_version" : "5.5.2"
   },
   "tagline" : "You Know, for Search"
  }
#+END_EXAMPLE
 


** Setting up nginx
  To install nginx run the following commands in terminal.
  sudo apt-get update
  sudo apt-get install nginx

  We need to now start nginx, which can be done using either the command
  sudo service nginx start


** Testing nginx
  After configuring nginx run http://localhost:9200 
  the following result should be obtained
  {
   "name" : "Mister Fear",
   "cluster_name" : "elasticsearch",
   "cluster_uuid" : "xrgRgsPFSkeqx266XlQuyQ",
   "version" : {
   "number" : "2.4.4",
   "build_hash" : "fcbb46dfd45562a9cf00c604b30849a6dec6b017",
   "build_timestamp" : "2017-01-03T11:33:16Z",
   "build_snapshot" : false,
   "lucene_version" : "5.5.2"
   },
  "tagline" : "You Know, for Search"
 }


** Routing the requests through nginx
   Comment out the config network.bind_host and network.publish_host.
   #network.bind_host: #some_value
   #network.publish_host: #some_other_value  

   Now add the following config to the same file.
   network.host: localhost

   We need to restart Elasticsearch  Run the following command in the terminal
   sudo service elasticsearch restart


** Testing disabling of external request to elastic search
   Running the command
   curl http://domain.com:9200

   will result in the below error. 
   curl: (7) Failed to connect to domain.com port 9200: Connection refused
   
   If you login into the elasticsearch server and run the below command 
   in the terminal, it should produce a valid output.
   curl http://localhost:9200
   should result in

   {
    "status" : 200,
    "name" : "Agent",
    "version" : {
    "number" : "1.1.2",
    "build_hash" : "e511f7b28b77c4d99175905fac65bffbf4c80cf7",
    "build_timestamp" : "2014-05-22T12:27:39Z",
    "build_snapshot" : false,
    "lucene_version" : "4.7"
   },
   "tagline" : "You Know, for Search"
   }
   Now route the requests to Elasticsearch server through the domain.
   The next task is to make nginx capture all the requests to the 
   domain 10.4.12.46 and route it to localhost:9200 and send back a response.

   To accomplish that, we need to create a file 
   /etc/nginx/sites-available/elasticsearch with the following content.

   server {
       listen 80;
       server_name 10.4.12.46;
       location / {
       rewrite ^/(.*) /$1 break;
       proxy_ignore_client_abort on;
       proxy_pass http://localhost:9200;
       proxy_redirect http://localhost:9200 http://10.4.12.46;
       proxy_set_header  X-Real-IP  $remote_addr;
       proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header  Host $http_host;
       }
   }

   In the above config, we have only created the configuration. 
   To enable it, we need to create a symlink for this in
   /etc/nginx/sites-enabled.

   Run the following command in terminal   
   sudo ln /etc/nginx/sites-available/elasticsearch /etc/nginx/sites-enabled/

   Now we need to reload the nginx configuration for the new site to take effect.  
   sudo service nginx reload


** Test nginx forwards the request

   Run the following command in browser
   http://10.4.12.46
   should return something similar to
   
   {
   "status" : 200,
   "name" : "Richard Parker",
   "version" : {
   "number" : "1.1.2",
   "build_hash" : "e511f7b28b77c4d99175905fac65bffbf4c80cf7",
   "build_timestamp" : "2014-05-22T12:27:39Z",
   "build_snapshot" : false,
   "lucene_version" : "4.7"
   },
   "tagline" : "You Know, for Search"
   }


** Adding Basic HTTP Authentication
   To setup basic HTTP authentication, we need to create a password file. 
   The easiest way to do it is through apache-utils. We need to install it.
   sudo apt-get install apache2-utils

   Now lets create a password file with the command htpasswd. 
   sudo htpasswd -c /etc/elasticsearch/user.pwd username
   htpasswd will prompt you for a password.
   New password: 
   Re-type new password: 
   Adding password for user username

   Now a file /etc/elasticsearch/user.pwd will be created with 
   the username and password specified in the following format.
   login:password

   Now we need to add this to our nginxâ€™s es.domain.com configuration. We will add the following lines to /etc/nginx/sites-available/elasticsearch.
   auth_basic "Elasticsearch Authentication";
   auth_basic_user_file /etc/elasticsearch/user.pwd;
   
   The file /etc/nginx/sites-available/elasticsearch should look like this.

   server {
      listen 80;
    server_name 10.4.12.46;
    location / {
        rewrite ^/(.*) /$1 break;
        proxy_ignore_client_abort on;
        proxy_pass http://localhost:9200;
        proxy_redirect http://localhost:9200 https://10.4.12.46;
        proxy_set_header  X-Real-IP  $remote_addr;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header  Host $http_host;
        auth_basic "Elasticsearch Authentication";
        auth_basic_user_file /etc/elasticsearch/user.pwd;
        }
   }
   Now lets reload nginx 
   sudo service nginx reload


** Testing HTTP Authentication

   Let us try to access Elasticsearch without authentication should cause an error.

   curl http://10.4.12.46
   should result in

   <html>
   <head><title>401 Authorization Required</title></head>
   <body bgcolor="white">
   <center><h1>401 Authorization Required</h1></center>
   <hr><center>nginx/1.4.1 (Ubuntu)</center>
   </body>
   </html>
   Now let us try the same command with authentication.
   curl -u username http://es.domain.com
   will prompt you for the password.

   Enter host password for user 'username':
   Following the correct password, you should get the status message
   
   {
    "status" : 200,
    "name" : "Steel Spider",
    "version" : {
    "number" : "1.2.1",
    "build_hash" : "6c95b759f9e7ef0f8e17f77d850da43ce8a4b364",
    "build_timestamp" : "2014-06-03T15:02:52Z",
    "build_snapshot" : false,
    "lucene_version" : "4.8"
    },
  "tagline" : "You Know, for Search"
  }


