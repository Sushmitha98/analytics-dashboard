#+TITLE: Data Visualisation For Vlead
#+AUTHOR: VLEAD
#+DATE: [2017-09-25 Mon]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil

* Introduction 
  This document illustrates Data visualisaton of Vlead.

* Visualisation
** Serve template
#+NAME: serve_template
#+BEGIN_SRC python 
tmpl_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'templates')
app = Flask(__name__, template_folder=tmpl_dir)

#+END_SRC

** Get repohistory
*** Implementation

#+NAME: getrepo_history
#+BEGIN_SRC python
def getRepoHistory():		
    #virtualLabs = RepositoryList('Virtual-Labs')
    return getReposHistoryData()
#+END_SRC

** Get repolangdata
   
*** Implementation

#+NAME: getrepolangdata
#+BEGIN_SRC python 
def getRepoLangData():
    return getRepoLanguageData()

#+END_SRC

** Get repolangdataasJson 
   

*** Implementation

#+NAME: getrepolangdataasjson
#+BEGIN_SRC python 
def getRepoLangDataAsJSON():
    return getRepoLanguageDataAsJSON()
#+END_SRC

** visualise_html 
	      
*** Implementation
   
#+NAME: visualise_html
#+BEGIN_SRC python
 @app.route("/")
 def index():
    repoData = getRepoHistory()
    repoLangData = getRepoLanguageData()
    return render_template('visualize.html',**locals())      
 

#+END_SRC

** hello world
 
*** Implementation
#+NAME: hello
#+BEGIN_SRC python
@app.route("/hello")
def hello():
    return "Hello World!"

#+END_SRC
** visualisation_d3
   
*** Implementation
   
#+NAME: d3_visualisation
#+BEGIN_SRC python
@app.route("/d3visualize")
def d3visualize():
    #repoData = getRepoHistory()
    repoLangDataAsJSON = json.dumps(getRepoLangDataAsJSON())
    #repoLangDataAsJSON = html.unescape(repoLangDataAsJSON)
    print("repoLangDataAsJSON : " , repoLangDataAsJSON)
    return render_template('d3visualize.html',**locals())

#+END_SRC

** testlocals

*** Implementation 

#+NAME: testlocals
#+BEGIN_SRC python
@app.route("/test")
def test():
    #repoData = getRepoHistory()
    repoLangData2 = getRepoLanguageDataAsJSON()
    return render_template('test.html',**locals())

#+END_SRC
								:boilerplate:

** runapp
#+NAME:runapp
#+BEGIN_SRC python
if __name__ == "__main__":
    app.run()

#+END_SRC
* views
** d3visualisestyling
#+NAME: d3visualise
#+BEGIN_SRC html
<script src="https://d3js.org/d3.v3.min.js"></script>



<html>
  <body>

      <!--<div class="widget">
        <div class="header">Browser Market Share</div>
        <div id="chart" class="chart-container"></div>
      </div>-->
        <div id="chart"  style="width: 900px; height: 900px;" class="chart-container"></div>

  </body>
 <head>
#+END_SRC

** visualise
*** Implementation
#+NAME: visualise 
#+BEGIN_SRC html
<script type="text/javascript">//<![CDATA[ 
/*var dataset = [
    { name: 'AAAAAA', percent: 29.10 },
    { name: 'Chrome', percent: 20.51 },
    { name: 'Safari', percent: 10.68 },
    { name: 'Firefox', percent: 4.71 },
    { name: 'Onyx', percent: 4.01 },
    { name: 'Edge', percent: 10.00 },
    { name: 'Samsung', percent: 12.00 },
    { name: 'Sony', percent: 3.00 },
    { name: 'Breeze', percent: 4.00 },
    { name: 'Others', percent: 2.00 }
];*/
//alert("repoLangDataAsJSON : " + {{repoLangDataAsJSON}});
var dataset = {{repoLangDataAsJSON | safe}};
//alert("dataset : " + dataset);


var pie=d3.layout.pie()
  .value(function(d){return d.percent})
  .sort(null)
  .padAngle(.03);

var w=600,h=600;
 
var outerRadius=w/4;
var innerRadius=40;

var color = d3.scale.category10();

var arc=d3.svg.arc()
  .outerRadius(outerRadius)
  .innerRadius(innerRadius);

var svg=d3.select("#chart")
  .append("svg")
  .attr({
      width:w,
      height:h,
      class:'shadow'
  }).append('g')
  .attr({
      transform:'translate('+w/3+','+h/3+')'
  });

var path=svg.selectAll('path')
  .data(pie(dataset))
  .enter()
  .append('path')
  .attr({
      d:arc,
      fill:function(d,i){
          return color(d.data.lang);
      }
  });
 
path.transition()
  .duration(1000)
  .attrTween('d', function(d) {
      var interpolate = d3.interpolate({startAngle: 0, endAngle: 0}, d);
      return function(t) {
          return arc(interpolate(t));
      };
  });
 
 
var restOfTheData=function(){
    var text=svg.selectAll('text')
        .data(pie(dataset))
        .enter()
        .append("text")
        .transition()
        .duration(200)
        .attr("transform", function (d) {
            return "translate(" + arc.centroid(d) + ")";
        })
        .attr("dy", ".4em")
        .attr("text-anchor", "middle")
        .text(function(d){
            return d.data.percent+"%";
        })
        .style({
            fill:'#ffffff',
 
            'font-size':'10px'
        });
 
    var legendRectSize=12;
    var legendSpacing=12;
    var legendHeight=legendRectSize+legendSpacing;
 
 
    var legend=svg.selectAll('.legend')
        .data(color.domain())
        .enter()
        .append('g')
        .attr({
            class:'legend',
            transform:function(d,i){
                //Just a calculation for x & y position
                return 'translate(225,' + ((i*legendHeight)-125) + ')';
            }
        });
    legend.append('rect')
        .attr({
            width:legendRectSize,
            height:legendRectSize,
            rx:20,
            ry:20
        })
        .style({
            fill:color,
            stroke:color
        });
 
    legend.append('text')
        .attr({
            x:30,
            y:10
        })
        .text(function(d){
            return d;
        }).style({
            fill:'#929DAF',
            /*fill:'#000000',*/
            'font-size':'10px'
            
        });
};

setTimeout(restOfTheData,1000);
//]]>
    </script>
#+END_SRC
    
** styling
#+NAME: styling
#+BEGIN_SRC html

<head>

  <style media="screen" type="text/css">

body {
    background-color: #FFFFFF;
    width: 100%;
    font-family: 'Roboto', sans-serif;
    height: 100%;
}


.widget {
    margin: 0 auto;
    width:950px;
    margin-top:150px;
    background-color: #222D3A;
    border-radius: 5px;
    box-shadow: 0px 0px 1px 0px #06060d;

}

.header{
    background-color: #29384D;
    height:40px;
    color:#929DAF;
    text-align: center;
    line-height: 40px;<
    border-top-left-radius: 7px;
    border-top-right-radius: 7px;
    font-weight: 400;
    font-size: 1.5em;
    text-shadow: 1px 1px #06060d;
}

.chart-container{
    padding:25px;
}

.shadow {
    -webkit-filter: drop-shadow( 0px 3px 3px rgba(0,0,0,.5) );
    filter: drop-shadow( 0px 3px 3px rgba(0,0,0,.5) );
}

</style>
 
</html>
#+END_SRC
** test
#+NAME: test
#+BEGIN_SRC html
<head>

  <style media="screen" type="text/css">

body {
    background-color: #FFFFFF;
    width: 100%;
    font-family: 'Roboto', sans-serif;
    height: 100%;
}


.widget {
    margin: 0 auto;
    width:950px;
    margin-top:150px;
    background-color: #222D3A;
    border-radius: 5px;
    box-shadow: 0px 0px 1px 0px #06060d;

}

.header{
    background-color: #29384D;
    height:40px;
    color:#929DAF;
    text-align: center;
    line-height: 40px;<
    border-top-left-radius: 7px;
    border-top-right-radius: 7px;
    font-weight: 400;
    font-size: 1.5em;
    text-shadow: 1px 1px #06060d;
}

.chart-container{
    padding:25px;
}

.shadow {
    -webkit-filter: drop-shadow( 0px 3px 3px rgba(0,0,0,.5) );
    filter: drop-shadow( 0px 3px 3px rgba(0,0,0,.5) );
}

</style>
 
</html>
#+END_SRC
** visualiserepo
#+NAME:visualiserepo
#+BEGIN_SRC html
<head>

  <style media="screen" type="text/css">

body {
    background-color: #FFFFFF;
    width: 100%;
    font-family: 'Roboto', sans-serif;
    height: 100%;
}


.widget {
    margin: 0 auto;
    width:950px;
    margin-top:150px;
    background-color: #222D3A;
    border-radius: 5px;
    box-shadow: 0px 0px 1px 0px #06060d;

}

.header{
    background-color: #29384D;
    height:40px;
    color:#929DAF;
    text-align: center;
    line-height: 40px;<
    border-top-left-radius: 7px;
    border-top-right-radius: 7px;
    font-weight: 400;
    font-size: 1.5em;
    text-shadow: 1px 1px #06060d;
}

.chart-container{
    padding:25px;
}

.shadow {
    -webkit-filter: drop-shadow( 0px 3px 3px rgba(0,0,0,.5) );
    filter: drop-shadow( 0px 3px 3px rgba(0,0,0,.5) );
}

</style>
 
</html>
#+END_SRC
* repositoryview
** authinticate
*** implementation
#+NAME:authenticate
#+BEGIN_SRC python
def authnticate(user, passwd):
    auth=HTTPBasicAuth(user, passwd)
    return auth
#+END_SRC
** getrepohistory
*** implementation
#+NAME:getrepohistory
#+BEGIN_SRC python
def getReposHistoryData():
    repoData1 = []
    currYear = time.strftime("%Y")
    dict = {}
    t=0    
    for _ in range (0, 7):
        year = int(currYear) - t
        dict[str(year)]=0
        t += 1

    auth=HTTPBasicAuth('python-user', 'python123')
    url = 'https://api.github.com/orgs/virtual-labs/repos?page=1&per_page=100&sort=name&direction=asc'
    url2 = 'https://api.github.com/orgs/virtual-labs/repos?page=2&per_page=100&sort=name&direction=asc'
    response = requests.get(url, auth)
    response1 = requests.get(url2, auth)
    data = json.loads(response.text) 
    data += json.loads(response1.text)

    for item in data:
        #2014-09-16T11:17:01Z
        localDatetime = time.strptime(item['created_at'], '%Y-%m-%dT%H:%M:%SZ')
        #print(localDatetime)
        localYear = localDatetime.tm_year
        dict[str(localYear)] += 1

    print(dict)
    j=0

    for rdItem in dict:
        #print(rdItem)
        repoData1.append([])
        repoData1[j].append(rdItem)
        repoData1[j].append(dict[rdItem])
        j += 1
        
    print("repoData : ", repoData1)
    return repoData1  
#+END_SRC
** getrepolandata
*** implementation
#+NAME:getrepolanguage
#+BEGIN_SRC python
def getRepoLanguageData():
    repoLangData1 = []

    dict = {}

    auth=HTTPBasicAuth('python-user', 'python123')
    url = 'https://api.github.com/orgs/virtual-labs/repos?page=1&per_page=100&sort=name&direction=asc'
    url2 = 'https://api.github.com/orgs/virtual-labs/repos?page=2&per_page=100&sort=name&direction=asc'
    response = requests.get(url, auth)
    response1 = requests.get(url2, auth)
    data = json.loads(response.text) 
    data += json.loads(response1.text)

    for item in data:
        #print('language : ',item['language'])
        #print('keys : ', dict.keys())
        if item['language'] is None:
            checkItem = 'NULL'
        else:
            checkItem = item['language']
        if checkItem in dict.keys():
            #print('language if: ',checkItem) 
            #repoLangData1[checkItem].append(item)
            dict[checkItem] += 1
        else:
            #print('language else: ',checkItem)
            dict[checkItem] = 1

    j=0

    for rdItem in dict:
        #print(rdItem)
        repoLangData1.append([])
        repoLangData1[j].append(rdItem)
        repoLangData1[j].append(dict[rdItem])
        j += 1
        
    print("repoLangData : ", repoLangData1)
    return repoLangData1
#+END_SRC
** getrepolangasdataasjson
*** implementation
#+NAME:getrepolanguageasjson
#+BEGIN_SRC python
def getRepoLanguageDataAsJSON():
    repoLangData2 = []

    dict = {}
 
    auth=HTTPBasicAuth('python-user', 'python123')
    url = 'https://api.github.com/orgs/virtual-labs/repos?page=1&per_page=100&sort=name&direction=asc'
    url2 = 'https://api.github.com/orgs/virtual-labs/repos?page=2&per_page=100&sort=name&direction=asc'
    response = requests.get(url, auth)
    response1 = requests.get(url2, auth)
    data = json.loads(response.text) 
    data += json.loads(response1.text)

    for item in data:
        #print('language : ',item['language'])
        #print('keys : ', dict.keys())
        if item['language'] is None:
            checkItem = 'NULL'
        else:
            checkItem = item['language']
        if checkItem in dict.keys():
            dict[checkItem] += 1
        else:
            dict[checkItem] = 1

    j=0

    print("dictionary : ", dict)

    totalRepos = 0

    for rdItem in dict:
        totalRepos += dict[rdItem]

    for rdItem in dict:
        
        print(rdItem)
        jdata = {
                   'lang' : rdItem,
                   'percent' : round(100*dict[rdItem]/totalRepos, 0)
                }
        json_str = json.dumps(jdata)
        repoLangData2.insert(j, json.loads(json_str))

        j += 1

    #repoLangData2 = json.dumps(repoLangData2)
    print("repoLangDataxxx : ", repoLangData2)
    return repoLangData2

#+END_SRC    

* Infra                                                         :boilerplate:

  
** sources
*** Imports 
#+NAME: imports_for_sources
#+BEGIN_SRC python
from flask import Flask, flash, redirect, render_template, request, session, abort
import os
import json
import requests
import html
from Repository import getReposHistoryData
from Repository import getRepoLanguageData
from Repository import getRepoLanguageDataAsJSON
#from Repository import RepositoryList

#+END_SRC
** sources_2
*** imports_2
#+NAME: imports_2_for_sources
#+BEGIN_SRC pythonimport time
import datetime
import requests
import json
import html
from requests.auth import HTTPBasicAuth
#+END_SRC



    
    


* Tangle                                                        :boilerplate:
  
** sources
#+BEGIN_SRC python :tangle virtualLabStatVisualization.py :eval no :noweb yes
<<imports_for_sources>>
<<serve_template>>
<<getrepo_history>>
<<getrepolangdata>>	
<<getrepolangdataasjson>>
<<visualise_html>>
<<hello>>
<<d3_visualisation>>
<<testlocals>>
<<runapp>>
#+END_SRC   


   
#+BEGIN_SRC python :tangle Repository.py :eval no :noweb yes
<<imports_2_for_sources>>
<<authenticate>>
<<getrepohistory>>
<<getrepolanguage>>
<<getrepolanguageasjson>>
#+END_SRC

#+BEGIN_SRC html :tangle /home/hitesh/Downloads/new/templates/visual.html :eval no :noweb yes
<<d3visualise>>
<<visualise>>
<<styling>>
<<test>>
<<visualiserepo>>
#+END_SRC


   


   
